x$I = x$I - 1
setState(agent, x)
reschedule(time, agent)
}
sim$addLogger(newStateLogger(name="S", agent=NULL, state="S"))
sim$addLogger(newStateLogger("I", NULL, "I"))
sim$addLogger(newStateLogger("R", sim$get, "R"))
# schedule an infection event and a recovery event
reschedule(0, sim$get)
sim_out <- sim$run(0:sim_dur)
sim_out
library(ABM)
library(deSolve)
# the population size
N <-  10000
# the initial number of infectious agents
I0 <-  10
# the transmission rate
beta <-  0.4
# the recovery rate
gamma <-  0.2
# custom function to handle cases where rate == 0, which should return Inf
wait.exp <-  function(rate) if (rate == 0) Inf else rexp(1, rate)
# simulation duration
sim_dur <- 100
# set up function for reschedule (i.e. update state)
reschedule <-  function(time, agent) {
clearEvents(agent)
state = getState(agent)
# compute time point where 1 agent go from S to I compartment
t.inf = time + wait.exp(beta*state$I*state$S/N)
schedule(agent, newEvent(t.inf, handler.infect))
# compute time point where 1 agent go from I to R compartment
t.rec = time + wait.exp(gamma*state$I)
schedule(agent, newEvent(t.rec, handler.recover))
}
# Event for infected population
handler.infect <-  function(time, sim, agent) {
x = getState(agent)
x$S = x$S - 1
x$I = x$I + 1
setState(agent, x)
reschedule(time, agent)
}
# Event for recovered population
handler.recover <-  function(time, sim, agent) {
x = getState(agent)
x$R = x$R + 1
x$I = x$I - 1
setState(agent, x)
reschedule(time, agent)
}
# ----- Try multiple chains -----
no_chain <- 3
all_runs <- data.frame(times = 0:sim_dur)
for (i in 1:no_chain){
sim <-  Simulation$new()
# the initial state
sim$state <-  list(S=N-I0, I=I0, R=0)
# schedule an infection event and a recovery event
reschedule(0, sim$get)
sim$addLogger(newStateLogger(name="S", agent=NULL, state="S"))
sim$addLogger(newStateLogger("I", NULL, "I"))
sim$addLogger(newStateLogger("R", sim$get, "R"))
sim_out <- sim$run(0:sim_dur)
sim_out <- sim_out[, c("S", "I", "R")]
colnames(sim_out) <- paste0(colnames(sim_out), "_", i)
all_runs <- bind_cols(all_runs, sim_out)
}
head(all_runs)
?grep
grep(colnames(all_runs, "^S"))
grep(colnames(all_runs), "^S")
grep("^S",colnames(all_runs))
# compute mean of all the chain
result <- data.frame(
times = all_runs$times,
S = rowMeans(all_runs[, grep("^S", colnames(all_runs))]),
I = rowMeans(all_runs[, grep("^I", colnames(all_runs))]),
R = rowMeans(all_runs[, grep("^R", colnames(all_runs))]),
)
# compute mean of all the chain
result <- data.frame(
times = all_runs$times,
S = rowMeans(all_runs[, grep("^S", colnames(all_runs))]),
I = rowMeans(all_runs[, grep("^I", colnames(all_runs))]),
R = rowMeans(all_runs[, grep("^R", colnames(all_runs))])
)
result
# start the SIR model
sir_model <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dI <- beta/N * I * S - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
# define initial_state using values defined above
initial_state <- c(S = N - I0, I = I0, R = 0)
# define loss function
mse <- function(parameters) {
pred <- ode(initial_state, times = 0:sim_dur, func = sir_model, parms = parameters)
pred <- data.frame(pred)
sim <- result
# compute residual
res <- data.frame(
S = pred["S"] - sim["S"],
I = pred["I"] - sim["I"],
R = pred["R"] - sim["R"]
)
mean(sum((res)**2))
}
optim(c(beta = 0.4, gamma=0.5), fn = mse, gr="L-BFGS-B")
?optim
optim(c(beta = 0.4, gamma=0.5), fn = mse, gr="BFGS")
library(ABM)
library(deSolve)
# the population size
N <-  10000
# the initial number of infectious agents
I0 <-  10
# the transmission rate
beta <-  0.4
# the recovery rate
gamma <-  0.2
# custom function to handle cases where rate == 0, which should return Inf
wait.exp <-  function(rate) if (rate == 0) Inf else rexp(1, rate)
# simulation duration
sim_dur <- 100
# set up function for reschedule (i.e. update state)
reschedule <-  function(time, agent) {
clearEvents(agent)
state = getState(agent)
# compute time point where 1 agent go from S to I compartment
t.inf = time + wait.exp(beta*state$I*state$S/N)
schedule(agent, newEvent(t.inf, handler.infect))
# compute time point where 1 agent go from I to R compartment
t.rec = time + wait.exp(gamma*state$I)
schedule(agent, newEvent(t.rec, handler.recover))
}
# Event for infected population
handler.infect <-  function(time, sim, agent) {
x = getState(agent)
x$S = x$S - 1
x$I = x$I + 1
setState(agent, x)
reschedule(time, agent)
}
# Event for recovered population
handler.recover <-  function(time, sim, agent) {
x = getState(agent)
x$R = x$R + 1
x$I = x$I - 1
setState(agent, x)
reschedule(time, agent)
}
# ----- Try multiple chains -----
no_chain <- 20
all_runs <- data.frame(times = 0:sim_dur)
for (i in 1:no_chain){
sim <-  Simulation$new()
# the initial state
sim$state <-  list(S=N-I0, I=I0, R=0)
# schedule an infection event and a recovery event
reschedule(0, sim$get)
sim$addLogger(newStateLogger(name="S", agent=NULL, state="S"))
sim$addLogger(newStateLogger("I", NULL, "I"))
sim$addLogger(newStateLogger("R", sim$get, "R"))
sim_out <- sim$run(0:sim_dur)
sim_out <- sim_out[, c("S", "I", "R")]
colnames(sim_out) <- paste0(colnames(sim_out), "_", i)
all_runs <- bind_cols(all_runs, sim_out)
}
head(all_runs)
# compute mean of all the chain
result <- data.frame(
times = all_runs$times,
S = rowMeans(all_runs[, grep("^S", colnames(all_runs))]),
I = rowMeans(all_runs[, grep("^I", colnames(all_runs))]),
R = rowMeans(all_runs[, grep("^R", colnames(all_runs))])
)
result
# start the SIR model
sir_model <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dI <- beta/N * I * S - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
# define initial_state using values defined above
initial_state <- c(S = N - I0, I = I0, R = 0)
# define loss function
mse <- function(parameters) {
pred <- ode(initial_state, times = 0:sim_dur, func = sir_model, parms = parameters)
pred <- data.frame(pred)
sim <- result
# compute residual
res <- data.frame(
S = pred["S"] - sim["S"],
I = pred["I"] - sim["I"],
R = pred["R"] - sim["R"]
)
mean(sum((res)**2))
}
optim(c(beta = 0.4, gamma=0.5), fn = mse, gr="BFGS")
?mcapply
?mclapply
?parallel::mclapply
library(parallel)
library(parallel)
# ----- Try multiple chains -----
no_chain <- 20
all_runs <- data.frame(times = 0:sim_dur)
run_simulation <- function(i){
sim <-  Simulation$new()
# the initial state
sim$state <-  list(S=N-I0, I=I0, R=0)
# schedule an infection event and a recovery event
reschedule(0, sim$get)
sim$addLogger(newStateLogger(name="S", agent=NULL, state="S"))
sim$addLogger(newStateLogger("I", NULL, "I"))
sim$addLogger(newStateLogger("R", sim$get, "R"))
sim_out <- sim$run(0:sim_dur)
sim_out <- sim_out[, c("S", "I", "R")]
colnames(sim_out) <- paste0(colnames(sim_out), "_", i)
all_runs <- bind_cols(all_runs, sim_out)
}
parallel::mclapply(1:no_chain, run_simulation)
all_runs <- data.frame(times = 0:sim_dur)
parallel::mclapply(1:no_chain, run_simulation)
parallel::detectCores()
all_runs <- data.frame(times = 0:sim_dur)
run_simulation <- function(i){
sim <-  Simulation$new()
# the initial state
sim$state <-  list(S=N-I0, I=I0, R=0)
# schedule an infection event and a recovery event
reschedule(0, sim$get)
sim$addLogger(newStateLogger(name="S", agent=NULL, state="S"))
sim$addLogger(newStateLogger("I", NULL, "I"))
sim$addLogger(newStateLogger("R", sim$get, "R"))
sim_out <- sim$run(0:sim_dur)
sim_out <- sim_out[, c("S", "I", "R")]
colnames(sim_out) <- paste0(colnames(sim_out), "_", i)
all_runs <- bind_cols(all_runs, sim_out)
}
parallel::mclapply(1:no_chain, run_simulation, mc.cores = parallel::detectCores() - 2)
# compute mean of all the chain
result <- data.frame(
times = all_runs$times,
S = rowMeans(all_runs[, grep("^S", colnames(all_runs))]),
I = rowMeans(all_runs[, grep("^I", colnames(all_runs))]),
R = rowMeans(all_runs[, grep("^R", colnames(all_runs))])
)
result
all_runs <- data.frame(times = 0:sim_dur)
run_simulation <- function(i){
sim <-  Simulation$new()
# the initial state
sim$state <-  list(S=N-I0, I=I0, R=0)
# schedule an infection event and a recovery event
reschedule(0, sim$get)
sim$addLogger(newStateLogger(name="S", agent=NULL, state="S"))
sim$addLogger(newStateLogger("I", NULL, "I"))
sim$addLogger(newStateLogger("R", sim$get, "R"))
sim_out <- sim$run(0:sim_dur)
sim_out <- sim_out[, c("S", "I", "R")]
colnames(sim_out) <- paste0(colnames(sim_out), "_", i)
sim_out
}
parallel::mclapply(1:no_chain, run_simulation, mc.cores = parallel::detectCores() - 2)
?lapply
?sapply
run_simulation <- function(i){
sim <-  Simulation$new()
# the initial state
sim$state <-  list(S=N-I0, I=I0, R=0)
# schedule an infection event and a recovery event
reschedule(0, sim$get)
sim$addLogger(newStateLogger(name="S", agent=NULL, state="S"))
sim$addLogger(newStateLogger("I", NULL, "I"))
sim$addLogger(newStateLogger("R", sim$get, "R"))
sim_out <- sim$run(0:sim_dur)
sim_out <- sim_out[, c("S", "I", "R")]
colnames(sim_out) <- paste0(colnames(sim_out), "_", i)
sim_out
}
out <- parallel::mclapply(1:no_chain, run_simulation, mc.cores = parallel::detectCores() - 2)
print(head(rowSums(sapply(out, function(df){df$S} ))))
print(head(rowMeans(sapply(out, function(df){df$S} ))))
library(parallel)
# ----- Try multiple chains -----
no_chain <- 20
all_runs <- data.frame(times = 0:sim_dur)
run_simulation <- function(i){
sim <-  Simulation$new()
# the initial state
sim$state <-  list(S=N-I0, I=I0, R=0)
# schedule an infection event and a recovery event
reschedule(0, sim$get)
sim$addLogger(newStateLogger(name="S", agent=NULL, state="S"))
sim$addLogger(newStateLogger("I", NULL, "I"))
sim$addLogger(newStateLogger("R", sim$get, "R"))
sim_out <- sim$run(0:sim_dur)
sim_out <- sim_out[, c("S", "I", "R")]
colnames(sim_out) <- paste0(colnames(sim_out), "_", i)
sim_out
}
out <- parallel::mclapply(1:no_chain, run_simulation, mc.cores = parallel::detectCores() - 2)
# compute mean of all the chain
result <- data.frame(
times = all_runs$times,
S = rowMeans(sapply(out, function(df){df$S} )),
I = rowMeans(sapply(out, function(df){df$S} )),
R = rowMeans(sapply(out, function(df){df$S} ))
)
result
# compute mean of all the chain
result <- data.frame(
times = all_runs$times,
S = rowMeans(sapply(out, function(df){df$S} )),
I = rowMeans(sapply(out, function(df){df$I} )),
R = rowMeans(sapply(out, function(df){df$R} ))
)
result
# compute mean of all the chain
result <- data.frame(
times = 0:sim_dur,
S = rowMeans(sapply(out, function(df){df$S} )),
I = rowMeans(sapply(out, function(df){df$I} )),
R = rowMeans(sapply(out, function(df){df$R} ))
)
result
# start the SIR model
sir_model <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dI <- beta/N * I * S - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
# define initial_state using values defined above
initial_state <- c(S = N - I0, I = I0, R = 0)
# define loss function
mse <- function(parameters) {
pred <- ode(initial_state, times = 0:sim_dur, func = sir_model, parms = parameters)
pred <- data.frame(pred)
sim <- result
# compute residual
res <- data.frame(
S = pred["S"] - sim["S"],
I = pred["I"] - sim["I"],
R = pred["R"] - sim["R"]
)
mean(sum((res)**2))
}
optim(c(beta = 0.4, gamma=0.5), fn = mse, gr="BFGS")
library(parallel)
# ----- Try multiple chains -----
no_chain <- 50
run_simulation <- function(i){
sim <-  Simulation$new()
# the initial state
sim$state <-  list(S=N-I0, I=I0, R=0)
# schedule an infection event and a recovery event
reschedule(0, sim$get)
sim$addLogger(newStateLogger(name="S", agent=NULL, state="S"))
sim$addLogger(newStateLogger("I", NULL, "I"))
sim$addLogger(newStateLogger("R", sim$get, "R"))
sim_out <- sim$run(0:sim_dur)
sim_out <- sim_out[, c("S", "I", "R")]
colnames(sim_out) <- paste0(colnames(sim_out), "_", i)
sim_out
}
out <- parallel::mclapply(1:no_chain, run_simulation, mc.cores = parallel::detectCores() - 2)
# compute mean of all the chain
result <- data.frame(
times = 0:sim_dur,
S = rowMeans(sapply(out, function(df){df$S} )),
I = rowMeans(sapply(out, function(df){df$I} )),
R = rowMeans(sapply(out, function(df){df$R} ))
)
result
# start the SIR model
sir_model <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dI <- beta/N * I * S - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
# define initial_state using values defined above
initial_state <- c(S = N - I0, I = I0, R = 0)
# define loss function
mse <- function(parameters) {
pred <- ode(initial_state, times = 0:sim_dur, func = sir_model, parms = parameters)
pred <- data.frame(pred)
sim <- result
# compute residual
res <- data.frame(
S = pred["S"] - sim["S"],
I = pred["I"] - sim["I"],
R = pred["R"] - sim["R"]
)
mean(sum((res)**2))
}
optim(c(beta = 0.4, gamma=0.5), fn = mse, gr="BFGS")
?rexp
ggplot(data=result)+
geom_line(aes(x = time, y = S), color = "blueviolet") +
geom_line(aes(x = time, y = I), color = "red") +
geom_line(aes(x = time, y = R), color = "royalblue1")
library(ggplot)
library(ggplot2)
ggplot(data=result)+
geom_line(aes(x = time, y = S), color = "blueviolet") +
geom_line(aes(x = time, y = I), color = "red") +
geom_line(aes(x = time, y = R), color = "royalblue1")
ggplot(data=result)+
geom_line(aes(x = times, y = S), color = "blueviolet") +
geom_line(aes(x = times, y = I), color = "red") +
geom_line(aes(x = times, y = R), color = "royalblue1")
ode_res <- ode(initial_state, times = 0:sim_dur, func = sir_model, parms = c(beta = 0.4, gamma=0.2))
ggplot(data=ode)+
geom_line(aes(x = times, y = S), color = "blueviolet") +
geom_line(aes(x = times, y = I), color = "red") +
geom_line(aes(x = times, y = R), color = "royalblue1")
ggplot(data=ode_res)+
geom_line(aes(x = times, y = S), color = "blueviolet") +
geom_line(aes(x = times, y = I), color = "red") +
geom_line(aes(x = times, y = R), color = "royalblue1")
ggplot(data=data.frame(ode_res))+
geom_line(aes(x = times, y = S), color = "blueviolet") +
geom_line(aes(x = times, y = I), color = "red") +
geom_line(aes(x = times, y = R), color = "royalblue1")
ggplot(data=as.data.frame(ode_res))+
geom_line(aes(x = times, y = S), color = "blueviolet") +
geom_line(aes(x = times, y = I), color = "red") +
geom_line(aes(x = times, y = R), color = "royalblue1")
head(ode_res)
ggplot(data=as.data.frame(ode_res))+
geom_line(aes(x = time, y = S), color = "blueviolet") +
geom_line(aes(x = time, y = I), color = "red") +
geom_line(aes(x = time, y = R), color = "royalblue1")
ggplot(data=result)+
geom_line(aes(x = times, y = S), color = "blueviolet") +
geom_line(aes(x = times, y = I), color = "red") +
geom_line(aes(x = times, y = R), color = "royalblue1")
ggplot(data=as.data.frame(ode_res))+
geom_line(aes(x = time, y = S), color = "blueviolet") +
geom_line(aes(x = time, y = I), color = "red") +
geom_line(aes(x = time, y = R), color = "royalblue1")
ggplot(data=result)+
geom_line(aes(x = times, y = S), color = "blueviolet") +
geom_line(aes(x = times, y = I), color = "red") +
geom_line(aes(x = times, y = R), color = "royalblue1")
ggplot(data=as.data.frame(ode_res))+
geom_line(aes(x = time, y = S), color = "blueviolet") +
geom_line(aes(x = time, y = I), color = "red") +
geom_line(aes(x = time, y = R), color = "royalblue1")
ggplot(data=result)+
geom_line(aes(x = times, y = S), color = "blueviolet") +
geom_line(aes(x = times, y = I), color = "red") +
geom_line(aes(x = times, y = R), color = "royalblue1") +
scale_colour_manual(
values = c("s" = "blueviolet", "i" = "red", "r" = "royalblue1")
) +
labs(x=xlabel, linetype = "Line", colour = "Line", fill="Fill color")
ggplot(data=result)+
geom_line(aes(x = times, y = S), color = "blueviolet") +
geom_line(aes(x = times, y = I), color = "red") +
geom_line(aes(x = times, y = R), color = "royalblue1") +
scale_colour_manual(
values = c("s" = "blueviolet", "i" = "red", "r" = "royalblue1")
) +
labs(x="Time", y = "Count", colour = "Line color")
library(ggplot2)
ggplot(data=result)+
geom_line(aes(x = times, y = S), color = "s") +
geom_line(aes(x = times, y = I), color = "i") +
geom_line(aes(x = times, y = R), color = "r") +
scale_colour_manual(
values = c("s" = "blueviolet", "i" = "red", "r" = "royalblue1")
) +
labs(x="Time", y = "Count", colour = "Line color")
library(ggplot2)
ggplot(data=result)+
geom_line(aes(x = times, y = S, color = "s")) +
geom_line(aes(x = times, y = I, color = "i")) +
geom_line(aes(x = times, y = R, color = "r")) +
scale_colour_manual(
values = c("s" = "blueviolet", "i" = "red", "r" = "royalblue1")
) +
labs(x="Time", y = "Count", colour = "Line color")
library(ggplot2)
ggplot(data=result)+
geom_line(aes(x = times, y = S, color = "S")) +
geom_line(aes(x = times, y = I, color = "I")) +
geom_line(aes(x = times, y = R, color = "R")) +
scale_colour_manual(
values = c("S" = "blueviolet", "I" = "red", "R" = "royalblue1")
) +
labs(x="Time", y = "Count", colour = "Compartment")
